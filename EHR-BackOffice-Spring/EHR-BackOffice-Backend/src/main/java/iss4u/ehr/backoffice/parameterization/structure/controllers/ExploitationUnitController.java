package iss4u.ehr.backoffice.parameterization.structure.controllers;

import iss4u.ehr.backoffice.parameterization.structure.entities.ExploitationUnit;
import iss4u.ehr.backoffice.parameterization.material_resources.entities.RoomGrp;
import iss4u.ehr.backoffice.parameterization.structure.services.ExploitationUnitService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.persistence.EntityNotFoundException;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/parameterization/explunit")
public class ExploitationUnitController {

    @Autowired
    private ExploitationUnitService exploitationUnitService;

    @PostMapping
    public ResponseEntity<ExploitationUnit> createExploitationUnit(@RequestBody ExploitationUnit exploitationUnit) {
        exploitationUnitService.create(exploitationUnit);
        return new ResponseEntity<>(exploitationUnit, HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity<List<ExploitationUnit>> getAllExploitationUnits() {
        List<ExploitationUnit> ExploitationUnits = exploitationUnitService.retrieveExploitationUnits();
        return new ResponseEntity<>(ExploitationUnits, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<ExploitationUnit> getExploitationUnitById(@PathVariable("id") Long exploitationUnitId) {
        Optional<ExploitationUnit> ExploitationUnit = exploitationUnitService.getExploitationUnitByKy(exploitationUnitId);
        return ExploitationUnit.map(value -> new ResponseEntity<>(value, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @GetMapping("/ExploitationUnitName/{explUnitNm}")
    public ResponseEntity<ExploitationUnit> getExploitationUnitByNm(@PathVariable("explUnitNm") String explUnitNm) {
        ExploitationUnit ExploitationUnit = exploitationUnitService.getExploitationUnitByNm(explUnitNm);
        if (ExploitationUnit != null) {
            return new ResponseEntity<>(ExploitationUnit, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/{ExploitationUnitKey}/name")
    public String getExploitationUnitNameByKey(@PathVariable("explUnitKy") Long explUnitKy) {
        return exploitationUnitService.getExploitationUnitNameByKey(explUnitKy);
    }

    @PutMapping("/{explUnitKy}")
    public ResponseEntity<ExploitationUnit> updateExploitationUnit(@PathVariable Long explUnitKy, @RequestBody ExploitationUnit updatedExploitationUnit) {
        try {
            exploitationUnitService.update(explUnitKy, updatedExploitationUnit);
            return ResponseEntity.ok().build(); // Return 200 (OK) without a body
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.notFound().build();
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteExploitationUnit(@PathVariable("id") Long exploitationUnitId) {
        Optional<ExploitationUnit> existingExploitationUnit = exploitationUnitService.getExploitationUnitByKy(exploitationUnitId);
        if (existingExploitationUnit.isPresent()) {
            exploitationUnitService.delete(exploitationUnitId);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/{id}/child-elements")
    public ResponseEntity<List<RoomGrp>> getChildElements(@PathVariable("id") Long exploitationUnitId) {
        Optional<ExploitationUnit> ExploitationUnit = exploitationUnitService.getExploitationUnitByKy(exploitationUnitId);
        if (ExploitationUnit.isPresent()) {
            List<RoomGrp> childElements = exploitationUnitService.getChildElements(ExploitationUnit.get());
            return new ResponseEntity<>(childElements, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/{id}/child-elements")
    public ResponseEntity<HttpStatus> addChildElement(@PathVariable("id") Long exploitationUnitId, @RequestBody RoomGrp roomGrp) {
        Optional<ExploitationUnit> exploitationUnitOptional = exploitationUnitService.getExploitationUnitByKy(exploitationUnitId);
        if (exploitationUnitOptional.isPresent()) {
            exploitationUnitService.addChildElement(exploitationUnitOptional.get(), roomGrp);
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
