package iss4u.ehr.backoffice.parameterization.structure.services.implementation;

import iss4u.ehr.backoffice.parameterization.structure.entities.ExploitationUnit;
import iss4u.ehr.backoffice.parameterization.material_resources.entities.RoomGrp;
import iss4u.ehr.backoffice.parameterization.structure.repositories.ExploitationUnitRepository;
import iss4u.ehr.backoffice.parameterization.structure.services.ExploitationUnitService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityNotFoundException;
import java.util.List;
import java.util.Optional;

@Service
public class ExploitationUnitServiceImpl implements ExploitationUnitService {
    private final ExploitationUnitRepository exploitationUnitRepository;

    @Autowired
    public ExploitationUnitServiceImpl(ExploitationUnitRepository exploitationUnitRepository) {
        this.exploitationUnitRepository = exploitationUnitRepository;
    }

    @Override
    public void create(ExploitationUnit exploitationUnit) {
        exploitationUnitRepository.save(exploitationUnit);
    }

    @Override
    public List<ExploitationUnit> retrieveExploitationUnits() {
        return exploitationUnitRepository.findAll();
    }

    @Override
    public Optional<ExploitationUnit> getExploitationUnitByKy(Long exploitationUnitKy) {
        return exploitationUnitRepository.findById(exploitationUnitKy);
    }

    @Override
    public ExploitationUnit getExploitationUnitByNm(String explUnitNm) {
        return exploitationUnitRepository.findByExplUnitNm(explUnitNm);
    }

    @Override
    public String getExploitationUnitNameByKey(Long exploitationUnitKy) {
        Optional<ExploitationUnit> exploitationUnitOptional = exploitationUnitRepository.findById(exploitationUnitKy);
        return exploitationUnitOptional.isPresent() ? exploitationUnitOptional.get().getExplUnitNm() : "";
    }

    @Override
    public void update(Long exploitationUnitKy, ExploitationUnit updatedExploitationUnit) {
        ExploitationUnit existingExploitationUnit = exploitationUnitRepository.findById(exploitationUnitKy)
                .orElseThrow(() -> new EntityNotFoundException("Exploitation unit with id " + exploitationUnitKy + " not found"));

        // Update the properties
        existingExploitationUnit.setExplUnitNm(updatedExploitationUnit.getExplUnitNm());
        existingExploitationUnit.setExplUnitUnxTmUpdt(updatedExploitationUnit.getExplUnitUnxTmUpdt());

        exploitationUnitRepository.save(existingExploitationUnit);
    }

    @Override
    public void delete(Long exploitationUnitKy) {
        exploitationUnitRepository.deleteById(exploitationUnitKy);
    }

    @Override
    public List<RoomGrp> getChildElements(ExploitationUnit exploitationUnit) {
        return  exploitationUnit.getRoomGrps();
    }

    @Override
    public void addChildElement(ExploitationUnit exploitationUnit, RoomGrp roomGrp) {
        List<RoomGrp> roomGrps = exploitationUnit.getRoomGrps();
        roomGrps.add(roomGrp);
        roomGrp.setExploitationUnit(exploitationUnit);
        exploitationUnitRepository.save(exploitationUnit);
    }
}
